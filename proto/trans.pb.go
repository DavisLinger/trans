// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: trans.proto

package transport

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TransportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileSize int64  `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Data     string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TransportReq) Reset() {
	*x = TransportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trans_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportReq) ProtoMessage() {}

func (x *TransportReq) ProtoReflect() protoreflect.Message {
	mi := &file_trans_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportReq.ProtoReflect.Descriptor instead.
func (*TransportReq) Descriptor() ([]byte, []int) {
	return file_trans_proto_rawDescGZIP(), []int{0}
}

func (x *TransportReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *TransportReq) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *TransportReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type TransportResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *TransportResp) Reset() {
	*x = TransportResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trans_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransportResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportResp) ProtoMessage() {}

func (x *TransportResp) ProtoReflect() protoreflect.Message {
	mi := &file_trans_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportResp.ProtoReflect.Descriptor instead.
func (*TransportResp) Descriptor() ([]byte, []int) {
	return file_trans_proto_rawDescGZIP(), []int{1}
}

func (x *TransportResp) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type BatchTranResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName []string `protobuf:"bytes,1,rep,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *BatchTranResp) Reset() {
	*x = BatchTranResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trans_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchTranResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchTranResp) ProtoMessage() {}

func (x *BatchTranResp) ProtoReflect() protoreflect.Message {
	mi := &file_trans_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchTranResp.ProtoReflect.Descriptor instead.
func (*BatchTranResp) Descriptor() ([]byte, []int) {
	return file_trans_proto_rawDescGZIP(), []int{2}
}

func (x *BatchTranResp) GetFileName() []string {
	if x != nil {
		return x.FileName
	}
	return nil
}

var File_trans_proto protoreflect.FileDescriptor

var file_trans_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x5c, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x32, 0x8b, 0x01, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x3a, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0b,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x17, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x28, 0x01,
	0x42, 0x0b, 0x5a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trans_proto_rawDescOnce sync.Once
	file_trans_proto_rawDescData = file_trans_proto_rawDesc
)

func file_trans_proto_rawDescGZIP() []byte {
	file_trans_proto_rawDescOnce.Do(func() {
		file_trans_proto_rawDescData = protoimpl.X.CompressGZIP(file_trans_proto_rawDescData)
	})
	return file_trans_proto_rawDescData
}

var file_trans_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_trans_proto_goTypes = []interface{}{
	(*TransportReq)(nil),  // 0: transport.transportReq
	(*TransportResp)(nil), // 1: transport.transportResp
	(*BatchTranResp)(nil), // 2: transport.batchTranResp
}
var file_trans_proto_depIdxs = []int32{
	0, // 0: transport.transport.trans:input_type -> transport.transportReq
	0, // 1: transport.transport.batchUpLoad:input_type -> transport.transportReq
	1, // 2: transport.transport.trans:output_type -> transport.transportResp
	2, // 3: transport.transport.batchUpLoad:output_type -> transport.batchTranResp
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_trans_proto_init() }
func file_trans_proto_init() {
	if File_trans_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trans_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trans_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransportResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trans_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchTranResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trans_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trans_proto_goTypes,
		DependencyIndexes: file_trans_proto_depIdxs,
		MessageInfos:      file_trans_proto_msgTypes,
	}.Build()
	File_trans_proto = out.File
	file_trans_proto_rawDesc = nil
	file_trans_proto_goTypes = nil
	file_trans_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TransportClient is the client API for Transport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransportClient interface {
	Trans(ctx context.Context, in *TransportReq, opts ...grpc.CallOption) (*TransportResp, error)
	BatchUpLoad(ctx context.Context, opts ...grpc.CallOption) (Transport_BatchUpLoadClient, error)
}

type transportClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportClient(cc grpc.ClientConnInterface) TransportClient {
	return &transportClient{cc}
}

func (c *transportClient) Trans(ctx context.Context, in *TransportReq, opts ...grpc.CallOption) (*TransportResp, error) {
	out := new(TransportResp)
	err := c.cc.Invoke(ctx, "/transport.transport/trans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportClient) BatchUpLoad(ctx context.Context, opts ...grpc.CallOption) (Transport_BatchUpLoadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Transport_serviceDesc.Streams[0], "/transport.transport/batchUpLoad", opts...)
	if err != nil {
		return nil, err
	}
	x := &transportBatchUpLoadClient{stream}
	return x, nil
}

type Transport_BatchUpLoadClient interface {
	Send(*TransportReq) error
	CloseAndRecv() (*BatchTranResp, error)
	grpc.ClientStream
}

type transportBatchUpLoadClient struct {
	grpc.ClientStream
}

func (x *transportBatchUpLoadClient) Send(m *TransportReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transportBatchUpLoadClient) CloseAndRecv() (*BatchTranResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BatchTranResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransportServer is the server API for Transport service.
type TransportServer interface {
	Trans(context.Context, *TransportReq) (*TransportResp, error)
	BatchUpLoad(Transport_BatchUpLoadServer) error
}

// UnimplementedTransportServer can be embedded to have forward compatible implementations.
type UnimplementedTransportServer struct {
}

func (*UnimplementedTransportServer) Trans(context.Context, *TransportReq) (*TransportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trans not implemented")
}
func (*UnimplementedTransportServer) BatchUpLoad(Transport_BatchUpLoadServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchUpLoad not implemented")
}

func RegisterTransportServer(s *grpc.Server, srv TransportServer) {
	s.RegisterService(&_Transport_serviceDesc, srv)
}

func _Transport_Trans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).Trans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transport.transport/Trans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).Trans(ctx, req.(*TransportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transport_BatchUpLoad_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransportServer).BatchUpLoad(&transportBatchUpLoadServer{stream})
}

type Transport_BatchUpLoadServer interface {
	SendAndClose(*BatchTranResp) error
	Recv() (*TransportReq, error)
	grpc.ServerStream
}

type transportBatchUpLoadServer struct {
	grpc.ServerStream
}

func (x *transportBatchUpLoadServer) SendAndClose(m *BatchTranResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transportBatchUpLoadServer) Recv() (*TransportReq, error) {
	m := new(TransportReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Transport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transport.transport",
	HandlerType: (*TransportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "trans",
			Handler:    _Transport_Trans_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "batchUpLoad",
			Handler:       _Transport_BatchUpLoad_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "trans.proto",
}
